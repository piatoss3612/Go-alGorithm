package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
)

var (
	scanner = bufio.NewScanner(os.Stdin)
	writer  = bufio.NewWriter(os.Stdout)
	T       int
)

// 24040번: 예쁜 케이크
// https://www.acmicpc.net/problem/24040
// 난이도: 실버 2
// 메모리: 852 KB
// 시간: 4 ms
// 분류: 수학, 정수론
func main() {
	defer writer.Flush()
	scanner.Split(bufio.ScanWords)

	Setup()
	Solve()
}

func Setup() {
	T = scanInt()
}

func Solve() {
	/*
		# 규칙 찾기

		부피 1 -> 둘레 (1+1) * 2 = 4
		부피 2 -> 둘레 (1+2) * 2 = 6 -> 둘레를 3의 배수로 만들 수 있음
		부피 3 -> 둘레 (1+3) * 2 = 8
		부피 4 -> 둘레 (1+4) * 2 = 10, (2+2) * 2 = 8
		부피 5 -> 둘레 (1+5) * 2 = 12 -> 둘레를 3의 배수로 만들 수 있음
		부피 6 -> 둘레 (1+6) * 2 = 14, (2+3) * 2 = 10
		부피 7 -> 둘레 (1+7) * 2 = 16
		부피 8 -> 둘레 (1+8) * 2 = 18, (2+4) * 2 = 12 -> 둘레를 3의 배수로 만들 수 있음
		부피 9 -> 둘레 (1+9) * 2 = 20, (3+3) * 2 = 12 -> 둘레를 3의 배수로 만들 수 있음
		부피 10 -> 둘레 (1+10) * 2 = 22, (2+5) * 2 = 14
		부피 11 -> 둘레 (1+11) * 2 = 24 -> 둘레를 3의 배수로 만들 수 있음
		부피 12 -> 둘레 (1+12) * 2 = 26, (2+6) * 2 = 16, (3+4) * 2 = 14
		부피 13 -> 둘레 (1+13) * 2 = 28
		부피 14 -> 둘레 (1+14) * 2 = 30, (2+7) * 2 = 18 -> 둘레를 3의 배수로 만들 수 있음
		부피 15 -> 둘레 (1+15) * 2 = 32, (3+5) * 2 = 16
		부피 16 -> 둘레 (1+16) * 2 = 34, (2+8) * 2 = 20, (4+4) * 2 = 16
		부피 17 -> 둘레 (1+17) * 2 = 36 -> 둘레를 3의 배수로 만들 수 있음
		부피 18 -> 둘레 (1+18) * 2 = 38, (2+9) * 2 = 22, (3+6) * 2 = 18
		부피 19 -> 둘레 (1+19) * 2 = 40
		부피 20 -> 둘레 (1+20) * 2 = 42, (2+10) * 2 = 24, (4+5) * 2 = 18
		부피 21 -> 둘레 (1+21) * 2 = 44, (3+7) * 2 = 20
		부피 22 -> 둘레 (1+22) * 2 = 46, (2+11) * 2 = 26, (4+6) * 2 = 20
		부피 23 -> 둘레 (1+23) * 2 = 48 -> 둘레를 3의 배수로 만들 수 있음
		부피 24 -> 둘레 (1+24) * 2 = 50, (2+12) * 2 = 28, (3+8) * 2 = 22, (4+7) * 2 = 22
		부피 25 -> 둘레 (1+25) * 2 = 52, (5+5) * 2 = 20
		부피 26 -> 둘레 (1+26) * 2 = 54, (2+13) * 2 = 30, (4+8) * 2 = 24
		부피 27 -> 둘레 (1+27) * 2 = 56, (3+9) * 2 = 24

		# 규칙

		1. 부피를 3으로 나누었을 때 나머지가 2인 경우 예쁜 케이크를 만들 수 있음
		2. 부피를 3으로 나누었을 때 나머지가 0이면서 가로와 세로의 길이가 3의 배수인 경우 예쁜 케이크를 만들 수 있음 -> 9로 나누어 떨어지는 경우
	*/

	for i := 1; i <= T; i++ {
		n := scanInt()
		if isPrettyCake(n) {
			fmt.Fprintln(writer, "TAK")
		} else {
			fmt.Fprintln(writer, "NIE")
		}
	}
}

func isPrettyCake(n int) bool {
	if n%3 == 2 {
		return true
	}

	if n%9 == 0 {
		return true
	}

	return false
}

func scanString() string {
	scanner.Scan()
	return scanner.Text()
}

func mustParseInt(s string) int {
	n, _ := strconv.Atoi(s)
	return n
}

func scanInt() int {
	return mustParseInt(scanString())
}
